version: 2

references:

  # docker container for python only jobs
  python_only_config: &python_only_config
    working_directory: ~/isshub
    docker:
      - image: circleci/python:3.8.5

  # build steps to save/restore the directory used by pip to cache downloaded packages
  save_pip_cache: &save_pip_cache
    save_cache:
      key: v1-pip-cache-{{ .Branch }}-{{ .Revision }}
      paths:
        - ~/.cache/pip
  restore_pip_cache: &restore_pip_cache
    restore_cache:
      keys:
        - v1-pip-cache-{{ .Branch }}-{{ .Revision }}
        - v1-pip-cache-{{ .Branch }}
        - v1-pip-cache

  # shortcut to attach the workspace before each job
  attach_workspace: &attach_workspace
    attach_workspace:
      at: "~/"

  # complete workflow with all jobs with their dependencies
  full_workflow_jobs: &full_workflow_jobs
    jobs:
      - checkout_code
      - install_code:
          requires:
            - checkout_code
      - check_commit:
          requires:
            - install_code
      - linter_mypy:
          requires:
            - install_code
      - linter_isort:
          requires:
            - install_code
      - linter_black:
          requires:
            - install_code
      - linter_flake8:
          requires:
            - install_code
      - linter_pylint:
          requires:
            - install_code
      - run_tests:
          requires:
            - install_code
      - build_doc:
          requires:
            - install_code
      - check_every_commit:
          requires:
            - install_code
      - build_python_package:
          requires:
            - linter_mypy
            - linter_isort
            - linter_black
            - linter_flake8
            - linter_pylint
            - run_tests
      - test_python_package_whl:
          requires:
            - build_python_package
      - test_python_package_targz:
          requires:
            - build_python_package

# jobs definition: they are used in ``workflows``
jobs:

  # get the code from git and save the repo to pass it to the next job
  checkout_code:
    <<: *python_only_config
    steps:
      - checkout
      - persist_to_workspace:
          root: "~/"
          paths:
            - isshub

  # install the project code and dependencies and save the venv and pip cache
  install_code:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - *restore_pip_cache
      - run:
          name: Install code
          command: |
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            make dev
      - *save_pip_cache
      - persist_to_workspace:
          root: "~/"
          paths:
            - venv
            - isshub

  check_commit:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Check commit message
          command: |
            source ~/venv/bin/activate
            make check-commit

  # 4 next jobs are linters: mypy, black, flake8 and pylint
  # they all use the workspace
  linter_mypy:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Run "mypy" linter
          command: |
            source ~/venv/bin/activate
            make mypy

  linter_isort:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Run "isort" linter
          command: |
            source ~/venv/bin/activate
            make check-isort

  linter_black:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Run "black" linter
          command: |
            source ~/venv/bin/activate
            make check-black

  linter_flake8:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Run "flake8" linter
          command: |
            source ~/venv/bin/activate
            make flake8

  linter_pylint:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Run "pylint" linter
          command: |
            source ~/venv/bin/activate
            make pylint

  # run the tests
  run_tests:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Run tests
          command: |
            source ~/venv/bin/activate
            make test

  # build the documentation
  build_doc:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - type: shell
        name: Install system dependencies
        command: sudo apt-get update -qq -y && sudo apt-get install -y graphviz
      - run:
          name: Auth with github
          # github changes their keys sometimes and we run into this issue:
          # https://circleci.com/gh/Isshub-io/isshub/118
          # so this should fix that here
          command: |
            mkdir -p ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null\n" > ~/.ssh/config
            chmod 600 ~/.ssh/config
            ssh-keyscan -Ht rsa github.com >> ~/.ssh/known_hosts
      - run:
          name: Build documentation
          command: |
            source ~/venv/bin/activate
            GIT_TO_SPHINX_UPDATE_BRANCHES=TRUE make doc-strict

  # run check and tests for every commit in the history for which it is not already done
  check_every_commit:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - *restore_pip_cache
      - type: shell
        name: Install system dependencies
        command: sudo apt-get update -qq -y && sudo apt-get install -y curl jq
      - run:
          name: Check every commits
          command: |
            source ~/venv/bin/activate
            ci/check-every-commit.sh

  # will build the python package, using the tag as the base version, suffixed with info from git describe if not a tag
  build_python_package:
    <<: *python_only_config
    steps:
      - *attach_workspace
      - run:
          name: Build package
          command: |
            sed -i -e "s/^version = .*$/version = $(git describe --tags)/" setup.cfg
            source ~/venv/bin/activate
            make dist
      - store_artifacts:
          path: dist/
      - save_cache:
          key: v1-isshub-dist-{{ .Revision }}
          paths:
            - ~/isshub/dist

  # will test that the python wheel package is installable and works
  test_python_package_whl:
    <<: *python_only_config
    steps:
      - checkout
      - *restore_pip_cache
      - restore_cache:
          keys:
            - v1-isshub-dist-{{ .Revision }}
      - run:
          name: Check package
          command: |
            ls -la
            mv dist _dist
            find ./isshub/ -type f -not -path '*/tests/*' -not -path '*/features/*' -delete
            find ./isshub/ -type d -empty -delete
            find ./isshub/ -type d -not -path '*/tests/*' -not -path '*/features/*' -not -name 'tests' -not -name 'features' -exec touch "{}/__init__.py" \;
            mv isshub isshub_tests
            make full-clean
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            pip install $(ls -tr _dist/*.whl | tail -n 1)[tests]
            make tests-nocov

  # will test that the python tar.gz package is installable and works
  test_python_package_targz:
    <<: *python_only_config
    steps:
      - checkout
      - *restore_pip_cache
      - restore_cache:
          keys:
            - v1-isshub-dist-{{ .Revision }}
      - run:
          name: Check package
          command: |
            ls -la
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            mv dist _dist
            find ./isshub/ -type f -not -path '*/tests/*' -not -path '*/features/*' -delete
            find ./isshub/ -type d -empty -delete
            find ./isshub/ -type d -not -path '*/tests/*' -not -path '*/features/*' -not -name 'tests' -not -name 'features' -exec touch "{}/__init__.py" \;
            mv isshub isshub_tests
            make full-clean
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            pip install $(ls -tr _dist/*.tar.gz | tail -n 1)[tests]
            make tests-nocov

workflows:
  version: 2
  full_workflow_on_push:
    <<: *full_workflow_jobs
  full_workflow_nightly:
    <<: *full_workflow_jobs
    triggers:
      - schedule:
          cron: "12 3 * * *" # Everyday at 3:21 am
          filters:
            branches:
              only:
                - develop
